/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct _NSRange {
	unsigned _field1;
	unsigned _field2;
} NSRange;

typedef struct CGPoint {
	float _field1;
	float _field2;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint _field1;
	CGSize _field2;
} CGRect;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct __SCNetworkReachability *SCNetworkReachabilityRef;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct {
	double _field1;
	double _field2;
} XXStruct_UNJ7RC;

typedef struct CGContext *CGContextRef;

typedef struct sqlite3 sqlite3;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct dispatch_queue_s dispatch_queue_s;

typedef struct __SecRandom SecRandom;

//This is the OpenGL creation settings apparently...
typedef struct CreationSettings {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
	bool _field5;
	bool _field6;
	bool _field7;
	bool _field8;
	bool _field9;
	bool _field10;
	bool _field11;
	bool _field12;
	int _field13;
	bool _field14;
	bool _field15;
	bool _field16;
	char *_field17;
	float _field18;
	int _field19;
	unsigned char _field20;
	unsigned char _field21;
	int _field22;
	int _field23;
	bool _field24;
	int _field25;
	bool _field26;
	int _field27;
	int _field28;
	bool _field29;
	BOOL _field30[64];
	BOOL _field31[8][64];
	unsigned _field32;
} CreationSettings;

typedef struct Runnable Runnable;

template<>
struct Atomic<int> {
	int mValue;
};

typedef struct __long {
	unsigned __cap_;
	unsigned __size_;
	char *__data_;
} long;

typedef struct __short {
	union {
		unsigned char __size_;
		BOOL __lx;
	};
	BOOL __data_[11];
} short;

typedef struct __raw {
	unsigned long __words[3];
} raw;

typedef struct __rep {
	union {
		long __l;
		short __s;
		raw __r;
	};
} rep;

template<>
struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	rep __first_;
};

template<>
struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
};

typedef struct Impl Impl;

typedef struct Thread {
	/*function-pointer*/ void **_field1;
	Runnable *_field2;
	unsigned _field3;
	Atomic<int> _field4;
	int _field5;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field6;
	Impl *_field7;
} Thread;

template<>
struct __compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > {
	unsigned short *__first_;
};

template<>
struct vector<unsigned short, std::__1::allocator<unsigned short> > {
	unsigned short *__begin_;
	unsigned short *__end_;
	__compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > __end_cap_;
};

template<>
struct Atomic<bool> {
	bool mValue;
};

typedef struct {
	void *_field1;
	void *_field2;
	void *_field3;
	void *_field4;
} XXStruct_jWHKOC;

typedef struct {
	void *_field1;
	void *_field2;
} XXStruct_G38UKC;

typedef struct PlatformInfo {
	int _field1;
	void *_field2;
	void *_field3;
	union {
		struct {
			void *_field1;
			int _field2;
		} _field1;
		XXStruct_jWHKOC _field2;
		XXStruct_G38UKC _field3;
		struct {
			void *_field1;
			void *_field2;
			void *_field3;
			void *_field4;
			void *_field5;
			void *_field6;
			void *_field7;
			void *_field8;
		} _field4;
		XXStruct_jWHKOC _field5;
		XXStruct_G38UKC _field6;
		struct {
			void *_field1;
		} _field7;
	} _field4;
	void *_field5[1];
} PlatformInfo;

typedef struct __long {
	unsigned _field1;
	unsigned _field2;
	int *_field3;
} long;

typedef struct __short {
	union {
		unsigned char _field1;
		int _field2;
	} _field1;
	int _field2[2];
} short;

typedef struct __rep {
	union {
		long _field1;
		short _field2;
		raw _field3;
	} _field1;
} rep;

template<>
struct __compressed_pair<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep, std::__1::allocator<wchar_t> > {
	rep _field1;
};

template<>
struct basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> > {
	__compressed_pair<std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep, std::__1::allocator<wchar_t> > _field1;
};

typedef struct GenericGLViewConfig {
	int mVersion;
	bool mStencil1Supported;
	bool mStencil4Supported;
	bool mStencil8Supported;
	bool mPackedDepth24Stencil8Supported;
	bool mDepth24Supported;
	bool mDepth32Supported;
	bool mMSAASupported;
	bool mInvalidateSupported;
} GenericGLViewConfig;

template<>
struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, void *>;

template<>
struct __tree_node_base<void *>;

template<>
struct __tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> *__left_;
};

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, glwebtools::SAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, void *>, 4> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, std::__1::less<std::__1::basic_string<char> >, true>, glwebtools::SAllocator<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, 4> > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, glwebtools::SAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, void *>, 4> > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
};

template<>
struct map<std::__1::basic_string<char>, iap::AppleItemInfo, std::__1::less<std::__1::basic_string<char> >, glwebtools::SAllocator<std::__1::pair<const std::__1::basic_string<char>, iap::AppleItemInfo>, 4> > {
	__tree<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, std::__1::less<std::__1::basic_string<char> >, true>, glwebtools::SAllocator<std::__1::__value_type<std::__1::basic_string<char>, iap::AppleItemInfo>, 4> > __tree_;
};

template<>
struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, void *>;

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, glwebtools::SAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, void *>, 4> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, std::__1::less<std::__1::basic_string<char> >, true>, glwebtools::SAllocator<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, 4> > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, glwebtools::SAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, void *>, 4> > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
};

template<>
struct map<std::__1::basic_string<char>, SKProduct *, std::__1::less<std::__1::basic_string<char> >, glwebtools::SAllocator<std::__1::pair<const std::__1::basic_string<char>, SKProduct *>, 4> > {
	__tree<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, std::__1::less<std::__1::basic_string<char> >, true>, glwebtools::SAllocator<std::__1::__value_type<std::__1::basic_string<char>, SKProduct *>, 4> > __tree_;
};

template<>
struct __compressed_pair<std::__1::basic_string<char> *, glwebtools::SAllocator<std::__1::basic_string<char>, 4> > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *_field1;
};

template<>
struct vector<std::__1::basic_string<char>, glwebtools::SAllocator<std::__1::basic_string<char>, 4> > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *_field1;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *_field2;
	__compressed_pair<std::__1::basic_string<char> *, glwebtools::SAllocator<std::__1::basic_string<char>, 4> > _field3;
};

template<>
struct __list_node<SKPaymentTransaction *, void *>;

template<>
struct __list_node_base<SKPaymentTransaction *, void *> {
	__list_node<SKPaymentTransaction *, void *> *_field1;
	__list_node<SKPaymentTransaction *, void *> *_field2;
};

template<>
struct __compressed_pair<unsigned long, glwebtools::SAllocator<std::__1::__list_node<SKPaymentTransaction *, void *>, 4> > {
	unsigned long _field1;
};

template<>
struct list<SKPaymentTransaction *, glwebtools::SAllocator<SKPaymentTransaction *, 4> > {
	__list_node_base<SKPaymentTransaction *, void *> _field1;
	__compressed_pair<unsigned long, glwebtools::SAllocator<std::__1::__list_node<SKPaymentTransaction *, void *>, 4> > _field2;
};

template<>
struct __list_node<iap::ios_billing::TransactionInfo, void *>;

template<>
struct __list_node_base<iap::ios_billing::TransactionInfo, void *> {
	__list_node<iap::ios_billing::TransactionInfo, void *> *_field1;
	__list_node<iap::ios_billing::TransactionInfo, void *> *_field2;
};

template<>
struct __compressed_pair<unsigned long, glwebtools::SAllocator<std::__1::__list_node<iap::ios_billing::TransactionInfo, void *>, 4> > {
	unsigned long _field1;
};

template<>
struct list<iap::ios_billing::TransactionInfo, glwebtools::SAllocator<iap::ios_billing::TransactionInfo, 4> > {
	__list_node_base<iap::ios_billing::TransactionInfo, void *> _field1;
	__compressed_pair<unsigned long, glwebtools::SAllocator<std::__1::__list_node<iap::ios_billing::TransactionInfo, void *>, 4> > _field2;
};

typedef struct Mutex {
	/*function-pointer*/ void **_field1;
	void *_field2;
} Mutex;

typedef struct AttributeValidator AttributeValidator;

typedef struct AttributeFormatter AttributeFormatter;

template<>
struct OptionalArgument<std::__1::basic_string<char>, glwebtools::AttributeValidator, glwebtools::AttributeFormatter> {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field1;
	AttributeValidator _field2;
	AttributeFormatter _field3;
	bool _field4;
};

typedef struct TransactionInfo {
	/*function-pointer*/ void **_field1;
	int _field2;
	int _field3;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field4;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field5;
	unsigned _field6;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field7;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field8;
	bool _field9;
	OptionalArgument<std::__1::basic_string<char>, glwebtools::AttributeValidator, glwebtools::AttributeFormatter> _field10;
	int _field11;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field12;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field13;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field14;
	int _field15;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field16;
	int _field17;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field18;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field19;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field20;
} TransactionInfo;

template<>
struct __tree_node<std::__1::basic_string<char>, void *>;

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > {
	__tree_node<std::__1::basic_string<char>, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > > __pair1_;
	__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > > __pair3_;
};

template<>
struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > {
	__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > > __tree_;
};

template<>
struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *>;

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
};

template<>
struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *__begin_node_;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > > __pair1_;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
};

template<>
struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > {
	__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > > __tree_;
};

template<>
struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *__first_;
};

template<>
struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *__begin_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > *__end_;
	__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > __end_cap_;
};

typedef struct CDynamicMemoryStream {
	/*function-pointer*/ void **_field1;
	char *_field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
} CDynamicMemoryStream;

template<>
struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, void *>;

template<>
struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, void *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> _field1;
};

template<>
struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long _field1;
};

template<>
struct __tree<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData> > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, void *> *_field1;
	__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, void *> > > _field2;
	__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, std::__1::less<std::__1::basic_string<char> >, true> > _field3;
};

template<>
struct map<std::__1::basic_string<char>, sociallib::SNSUserData, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sociallib::SNSUserData> > > {
	__tree<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, sociallib::SNSUserData> > > _field1;
};

typedef struct SNSAchievementData *SNSAchievementDataRef;

template<>
struct __compressed_pair<sociallib::SNSAchievementData *, std::__1::allocator<sociallib::SNSAchievementData> > {
	SNSAchievementDataRef _field1;
};

template<>
struct vector<sociallib::SNSAchievementData, std::__1::allocator<sociallib::SNSAchievementData> > {
	SNSAchievementDataRef _field1;
	SNSAchievementDataRef _field2;
	__compressed_pair<sociallib::SNSAchievementData *, std::__1::allocator<sociallib::SNSAchievementData> > _field3;
};

typedef struct SNSLeaderboardRowData *SNSLeaderboardRowDataRef;

template<>
struct __compressed_pair<sociallib::SNSLeaderboardRowData *, std::__1::allocator<sociallib::SNSLeaderboardRowData> > {
	SNSLeaderboardRowDataRef _field1;
};

template<>
struct vector<sociallib::SNSLeaderboardRowData, std::__1::allocator<sociallib::SNSLeaderboardRowData> > {
	SNSLeaderboardRowDataRef _field1;
	SNSLeaderboardRowDataRef _field2;
	__compressed_pair<sociallib::SNSLeaderboardRowData *, std::__1::allocator<sociallib::SNSLeaderboardRowData> > _field3;
};

typedef struct SNSLeaderboard *SNSLeaderboardRef;

template<>
struct __compressed_pair<sociallib::SNSLeaderboard *, std::__1::allocator<sociallib::SNSLeaderboard> > {
	SNSLeaderboardRef _field1;
};

template<>
struct vector<sociallib::SNSLeaderboard, std::__1::allocator<sociallib::SNSLeaderboard> > {
	SNSLeaderboardRef _field1;
	SNSLeaderboardRef _field2;
	__compressed_pair<sociallib::SNSLeaderboard *, std::__1::allocator<sociallib::SNSLeaderboard> > _field3;
};

typedef struct SNSLikeData *SNSLikeDataRef;

template<>
struct __compressed_pair<sociallib::SNSLikeData *, std::__1::allocator<sociallib::SNSLikeData> > {
	SNSLikeDataRef _field1;
};

template<>
struct vector<sociallib::SNSLikeData, std::__1::allocator<sociallib::SNSLikeData> > {
	SNSLikeDataRef _field1;
	SNSLikeDataRef _field2;
	__compressed_pair<sociallib::SNSLikeData *, std::__1::allocator<sociallib::SNSLikeData> > _field3;
};

typedef struct SNSRequestState {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
	bool _field6;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field7;
	CDynamicMemoryStream _field8;
	bool _field9;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _field10;
	vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > _field11;
	map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > > _field12;
	map<std::__1::basic_string<char>, sociallib::SNSUserData, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, sociallib::SNSUserData> > > _field13;
	vector<sociallib::SNSAchievementData, std::__1::allocator<sociallib::SNSAchievementData> > _field14;
	vector<sociallib::SNSLeaderboardRowData, std::__1::allocator<sociallib::SNSLeaderboardRowData> > _field15;
	vector<sociallib::SNSLeaderboard, std::__1::allocator<sociallib::SNSLeaderboard> > _field16;
	vector<sociallib::SNSLikeData, std::__1::allocator<sociallib::SNSLikeData> > _field17;
	CDynamicMemoryStream _field18;
	int _field19;
	bool _field20;
	bool _field21;
	int _field22;
} SNSRequestState;

typedef struct internal_state internal_state;

typedef struct z_stream_s {
	char *next_in;
	unsigned avail_in;
	unsigned total_in;
	char *next_out;
	unsigned avail_out;
	unsigned total_out;
	char *msg;
	internal_state *state;
	/*function-pointer*/ void *zalloc;
	/*function-pointer*/ void *zfree;
	void *opaque;
	int data_type;
	unsigned adler;
	unsigned reserved;
} z_stream_s;

typedef struct __CFHTTPMessage *CFHTTPMessageRef;

typedef struct _CFHTTPAuthentication *CFHTTPAuthenticationRef;

typedef struct __SecIdentity SecIdentity;

typedef struct CGImage *CGImageRef;


